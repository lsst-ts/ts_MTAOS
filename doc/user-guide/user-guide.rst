.. _User_Guide:

################
MTAOS User Guide
################

In automatic mode, the Telescope Control System (TCS) triggers *MTAOS* image processing.
MTAOS then sends commands to M1M3, M2 and Camera with the corrections to attain the best alignment of the optical surfaces.
*MTAOS* coordinates functions of the Wavefront Estimation Pipeline (WEP) and the Optical Feedback Control (OFC).
WEP process defocal images and calculates wavefront error based on the Transport of Intensity Equation (TIE).
Wavefront error is then feeded into OFC.
OFC estimates current optical state and calculates corrections values.
Correction values are estimated by minimizing the cost function balancing the image quality and offsets in the controlled Degrees Of Freedom (DOF).
There are 50 controlled DOFs.
M1M3 and M2 each has 20 bending modes.
The camera and the M2 hexapod each has 5 DOF (x, y, z and x and y rotation).
Although the optical surfaces bending modes are controlled directly by MTAOS, the corrections commands send from MTAOS contains aggregated actuator forces.

.. _Interface:

Interface
=========

The full set of commands, events, and telemetry can be found on `MTAOS xml <https://ts-xml.lsst.io/sal_interfaces/MTAOS.html>`_.
The principal use-case for this CSC is to calculate the wavefront error and send the corrections to the optical surfaces.
The ``processCalibrationProducts`` command sets calibration data used during analysis such as the flat images.
The ``processIntraExtraWavefrontError`` command process wavefront data of the commissioning camera (ComCam).
*Currently only ComCam is supported.*
Artificial defocal images can be generated by `PhoSim <https://github.com/lsst-ts/phosim_syseng4>`_.
Artificial flat images can be computed by `phosim_utils <https://github.com/lsst-dm/phosim_utils>`_.
Multiple (e.g. 5) pairs of wavefront images can be processed.

The ``issueWavefrontCorrection`` command sends corrections to the subsystems.
If multiple defocal images are presented on input, the average of calculated wavefront error is used for each CCD.
Internal data such as the DOF can be reset by ``resetWavefrontCorrection`` command.
The data shall be reset e.g. after a long telescope slew.

Although not often required, MTAOS publishes the calculated wavefront error in the ``wavefrontError`` event and DOF in the ``degreeOfFreedom`` event.
The ``wepDuration`` and ``ofcDuration`` events can be used to analyze system performance.
The ``wepDuration`` event is published for each CCD.
The mapping between sensor names and theirs IDs can be found `here <https://github.com/lsst-ts/ts_wep/blob/master/policy/sensorNameToId.yaml>`_.

If some subsystem(s) reject the correction command(s) from MTAOS, the ``rejectedDegreeOfFreedom`` event is published.
To recover, subsystems whose accepted the correction command might need to be put into a previous state to be consistent with the MTAOS internal data.
It is expected that during automatic operations recovery will be handled by the TCS or a higher level script.

.. _Example_Use_Case:

Example Use-Case
================

This example discuss Commanding from Python script. Commanding from others CSC is expected during routine operations.

After importing *ts_salobj* module, **Remote** object, a proxy for MTAOS CSC, is created.
The ``salobj.set_summary_state()`` call is used to switch to *ENABLED* state.

.. code:: python

    from lsst.ts import salobj
    mtaosCsc = salobj.Remote("MTAOS", salobj.Domain())
    await salobj.set_summary_state(mtaosCsc, salobj.State.ENABLED, timeout=30)

The optional *settingsToApply* argument of the ``salobj.set_summary_state()`` call can be provided to assing the configuration profile (file), such as default.yaml.
Configuration files (profiles) are stored in `MTAOS configuration <https://github.com/lsst-ts/ts_config_mttcs/tree/develop/MTAOS/v1>`_.
Notice that the version number (e.g. v1) is assigned in `ts_MTAOS schema <https://github.com/lsst-ts/ts_MTAOS/tree/master/schema>`_.

As CSC starts, ``Model`` or ``ModelSim`` objects are created.
This requires reading a lot of data from the database in the butler, so MTAOS needs some time to finish the configuration.
It is better to provide a long (~30 seconds) timeout for the transition.

In addition, you need to make sure the system is either *OFFLINE* or *STANDBY* before entering the *ENABLED* state to be sure the settings are applied.
It is recommended that you do the following:

.. code:: python

    await salobj.set_summary_state(mtaosCsc, salobj.State.STANDBY)
    await salobj.set_summary_state(mtaosCsc, salobj.State.ENABLED, settingsToApply="default.yaml", timeout=30)

To issue the correction to subsystems, you can do (note that the *value* parameter below is being removed in future versions of SAL):

.. code:: python

    await mtaosCsc.cmd_issueWavefrontCorrection.set_start(timeout=10, value=True)

If you ignore the input parameters, the default values will be applied.
However, it is recommended to add the *timeout* in seconds.
For example:

.. code:: python

    await mtaosCsc.cmd_issueWavefrontCorrection.set_start(timeout=10)

The ``processIntraExtraWavefrontError`` command (and all others) follows the same format as shown above:

.. code:: python

    await mtaosCsc.cmd_{nameOfCommand}.set_start(timeout=10, parameters)

It is noted that the ``processIntraExtraWavefrontError`` command will take some time.
If the *timeout* is less than the calculation time, you will get the *salobj.AckTimeoutError*.
In the simulation mode, it is safe to put the *timeout* to be 15 to 30 seconds.

To receive the events, you follow the format below, where the ``degreeOfFreedom`` event gives the most recent DOF.
This syntax is generic and can be replaced with any other event.

.. code:: python

    dof = await mtaosCsc.evt_degreeOfFreedom.next(flush=False, timeout=30)

The *next* command will pop out the value in the queue.
If you just want to know the current value, you can do:

.. code:: python

    dof = await mtaosCsc.evt_degreeOfFreedom.aget(timeout=30)

Receiving telemetry, you follow a similar format as event except using the prefix of *tel_* instead of *evt_* now.
You can follow `RemoteCommand <https://ts-salobj.lsst.io/py-api/lsst.ts.salobj.topics.RemoteCommand.html>`_, `RemoteEvent <https://ts-salobj.lsst.io/py-api/lsst.ts.salobj.topics.RemoteEvent.html>`_, and `RemoteTelemetry <https://ts-salobj.lsst.io/py-api/lsst.ts.salobj.topics.RemoteTelemetry.html>`_ for further details.
