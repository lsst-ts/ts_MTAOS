.. _Developer_Guide:

#########################
MTAOS Developer Guide
#########################

This CSC is a control system based on the *ts_salobj* that integrates with the middleware layer and high-level state machine. The detailed algorithms used in the active optics (AOS) depend on the modules of wavefront estimation pipeline (WEP) and optical feedback control (OFC): *ts_wep* and *ts_ofc*.

.. _Dependencies:

Dependencies
============

* `ts_salobj <https://github.com/lsst-ts/ts_salobj>`_
* `ts_config_mttcs <https://github.com/lsst-ts/ts_config_mttcs>`_
* `ts_wep <https://github.com/lsst-ts/ts_wep>`_
* `ts_ofc <https://github.com/lsst-ts/ts_ofc>`_

.. _Architecture:

Architecture
=============

The classes in module are listed below.

.. uml:: ../uml/mtaosClass.uml
    :caption: Class diagram of MTAOS

* **MtaosCsc** is a CSC class inherits from the **ConfigurableCsc** in *ts_salobj* to do the SAL communication.
* **CalcTime**: Calculation time class to collect the calculation time of time-consuming jobs to do the performance analysis.
* **CollOfListOfWfErr**: Collection of list of wavefront sensor data.
* **Config**: Configuration class as with functions to get the configuration details.
* **Model**: Model class that contains the interface classes of *ts_wep* and *ts_ofc*. This class integrates with WEP and OFC to do the wavefront analysis and correct the hexapod position and mirror bending mode.
* **ModelSim**: Simulation model class inherits from the **Model** to support the simulation mode needed in **MtaosCsc**.

In this design, only the **MtaosCsc** has the knowledege of high-level control logic and middleware layer from **ConfigurableCsc**. The business logic is implemented in the **Model**. This gives the benefit that the **Model** can be tested without SAL. The CSC simulation mode is implemented in **ModelSim**. The **MtaosCsc** dicides which class (**Model** or **ModelSim**) to instantiate and hold in the running. The **Config** can get the configration from the configuration yaml file or object from SAL message. The former is in the *schema* directory and is used in the unit tests of **Model** and **ModelSim**. The latter is in the *ts_config_mttcs* and is used for the CSC run by **MtaosCsc**.

.. _API:

APIs
=============

The content in this section is autogenerated from docstrings.

.. automodapi:: lsst.ts.MTAOS
    :no-inheritance-diagram:

.. _Build_And_Test:

Build and Test
==============

A note before beginning to develop this package. Install `docker <https://www.docker.com>`_ as this is required. The docker files can follow `ts_Dockerfiles <https://github.com/lsst-ts/ts_Dockerfiles>`_.

There are three docker images related to MTAOS: `aos_sal <https://hub.docker.com/repository/docker/lsstts/aos_sal>`_, `aos_aoclc <https://hub.docker.com/repository/docker/lsstts/aos_aoclc>`_, and `mtaos_sim <https://hub.docker.com/repository/docker/lsstts/mtaos_sim>`_. The *aos_sal* image contains the SAL and eups packages used in AOS. The *aos_aoclc* image begins from the *aos_sal* and contains the packages related to WEP and OFC. The *mtaos_sim* image begins from the aos_aoclc and contains the *ts_MTAOS*.

Build and test the CSC as follows:

.. code-block:: bash

    docker run -it -v ${repos_location}:/home/saluser/develop lsstts/aos_aoclc:${tag}
    make_idl_files.py MTAOS Hexapod MTM1M3 MTM2
    cd develop/ts_MTAOS
    setup -k -r .
    scons

The file to setup the environment is: */home/saluser/.setup.sh* or */home/saluser/.setup_dev.sh* that depends on the use case.

.. _Usage:

Usage
=====

Starting the CSC is done by using the following command.

.. prompt:: bash

    python bin/run_mtaos.py

You can setup the path of instrument signature removal (ISR) for the butler to use before running the CSC: ``export ISRDIRPATH=${path_to_isr_directory}``. The butler is the middleware used in scientific pipeline or *lsst_distrib* package.

You can use the argument of *-s* to run the simulation mode or *-h* to get the available argument details. For example, you can use the argument of *--logToFile* to log messages to a log file. Python *logging* package is used, with default log level set to *DEBUG*. You can change the level with *--debugLevel* argument.

Stopping the CSC is done by SIG-INTing the process, usually by :kbd:`ctrl` + :kbd:`c`.

.. _Contributing:

Contributing
============

Code and documentation contributions utilize pull-requests on github.
Feature requests can be made by filing a Jira ticket with the *ts_MTAOS* or *MTAOS* label. In all cases, reaching out to the :ref:`contacts for this CSC <Contact_Personnel>` is recommended.
